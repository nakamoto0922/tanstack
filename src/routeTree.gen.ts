/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersIndexRouteImport } from './routes/users/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as PostsIndexRouteImport } from './routes/posts/index'
import { Route as SettingsProfileRouteImport } from './routes/settings/profile'
import { Route as SettingsAdminRouteImport } from './routes/settings/admin'
import { Route as SettingsAccountRouteImport } from './routes/settings/account'
import { Route as PostsPostIdRouteImport } from './routes/posts/$postId'
import { Route as PostsPostIdEditRouteImport } from './routes/posts/$postId/edit'
import { Route as PostsPostIdCommentsRouteImport } from './routes/posts/$postId/comments'

const HeavyLazyRouteImport = createFileRoute('/heavy')()

const HeavyLazyRoute = HeavyLazyRouteImport.update({
  id: '/heavy',
  path: '/heavy',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/heavy.lazy').then((d) => d.Route))
const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsProfileRoute = SettingsProfileRouteImport.update({
  id: '/settings/profile',
  path: '/settings/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsAdminRoute = SettingsAdminRouteImport.update({
  id: '/settings/admin',
  path: '/settings/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsAccountRoute = SettingsAccountRouteImport.update({
  id: '/settings/account',
  path: '/settings/account',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsPostIdRoute = PostsPostIdRouteImport.update({
  id: '/posts/$postId',
  path: '/posts/$postId',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsPostIdEditRoute = PostsPostIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => PostsPostIdRoute,
} as any)
const PostsPostIdCommentsRoute = PostsPostIdCommentsRouteImport.update({
  id: '/comments',
  path: '/comments',
  getParentRoute: () => PostsPostIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/search': typeof SearchRoute
  '/heavy': typeof HeavyLazyRoute
  '/posts/$postId': typeof PostsPostIdRouteWithChildren
  '/settings/account': typeof SettingsAccountRoute
  '/settings/admin': typeof SettingsAdminRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/posts': typeof PostsIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/users': typeof UsersIndexRoute
  '/posts/$postId/comments': typeof PostsPostIdCommentsRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/search': typeof SearchRoute
  '/heavy': typeof HeavyLazyRoute
  '/posts/$postId': typeof PostsPostIdRouteWithChildren
  '/settings/account': typeof SettingsAccountRoute
  '/settings/admin': typeof SettingsAdminRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/posts': typeof PostsIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/users': typeof UsersIndexRoute
  '/posts/$postId/comments': typeof PostsPostIdCommentsRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/search': typeof SearchRoute
  '/heavy': typeof HeavyLazyRoute
  '/posts/$postId': typeof PostsPostIdRouteWithChildren
  '/settings/account': typeof SettingsAccountRoute
  '/settings/admin': typeof SettingsAdminRoute
  '/settings/profile': typeof SettingsProfileRoute
  '/posts/': typeof PostsIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/posts/$postId/comments': typeof PostsPostIdCommentsRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/search'
    | '/heavy'
    | '/posts/$postId'
    | '/settings/account'
    | '/settings/admin'
    | '/settings/profile'
    | '/posts'
    | '/settings'
    | '/users'
    | '/posts/$postId/comments'
    | '/posts/$postId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/search'
    | '/heavy'
    | '/posts/$postId'
    | '/settings/account'
    | '/settings/admin'
    | '/settings/profile'
    | '/posts'
    | '/settings'
    | '/users'
    | '/posts/$postId/comments'
    | '/posts/$postId/edit'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/search'
    | '/heavy'
    | '/posts/$postId'
    | '/settings/account'
    | '/settings/admin'
    | '/settings/profile'
    | '/posts/'
    | '/settings/'
    | '/users/'
    | '/posts/$postId/comments'
    | '/posts/$postId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  SearchRoute: typeof SearchRoute
  HeavyLazyRoute: typeof HeavyLazyRoute
  PostsPostIdRoute: typeof PostsPostIdRouteWithChildren
  SettingsAccountRoute: typeof SettingsAccountRoute
  SettingsAdminRoute: typeof SettingsAdminRoute
  SettingsProfileRoute: typeof SettingsProfileRoute
  PostsIndexRoute: typeof PostsIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/heavy': {
      id: '/heavy'
      path: '/heavy'
      fullPath: '/heavy'
      preLoaderRoute: typeof HeavyLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/profile': {
      id: '/settings/profile'
      path: '/settings/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof SettingsProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/admin': {
      id: '/settings/admin'
      path: '/settings/admin'
      fullPath: '/settings/admin'
      preLoaderRoute: typeof SettingsAdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/account': {
      id: '/settings/account'
      path: '/settings/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof SettingsAccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/$postId/edit': {
      id: '/posts/$postId/edit'
      path: '/edit'
      fullPath: '/posts/$postId/edit'
      preLoaderRoute: typeof PostsPostIdEditRouteImport
      parentRoute: typeof PostsPostIdRoute
    }
    '/posts/$postId/comments': {
      id: '/posts/$postId/comments'
      path: '/comments'
      fullPath: '/posts/$postId/comments'
      preLoaderRoute: typeof PostsPostIdCommentsRouteImport
      parentRoute: typeof PostsPostIdRoute
    }
  }
}

interface PostsPostIdRouteChildren {
  PostsPostIdCommentsRoute: typeof PostsPostIdCommentsRoute
  PostsPostIdEditRoute: typeof PostsPostIdEditRoute
}

const PostsPostIdRouteChildren: PostsPostIdRouteChildren = {
  PostsPostIdCommentsRoute: PostsPostIdCommentsRoute,
  PostsPostIdEditRoute: PostsPostIdEditRoute,
}

const PostsPostIdRouteWithChildren = PostsPostIdRoute._addFileChildren(
  PostsPostIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  SearchRoute: SearchRoute,
  HeavyLazyRoute: HeavyLazyRoute,
  PostsPostIdRoute: PostsPostIdRouteWithChildren,
  SettingsAccountRoute: SettingsAccountRoute,
  SettingsAdminRoute: SettingsAdminRoute,
  SettingsProfileRoute: SettingsProfileRoute,
  PostsIndexRoute: PostsIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
